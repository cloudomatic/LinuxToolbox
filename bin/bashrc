#
# Setup for a pizero acting as an IOT device
#
pizero_iot_setup() {
  # Setup external USB drive
  #sudo apt-get -y install ntfs-3g
  #sudo mkdir /mnt/drive/
  #sudo chown pi:pi /mnt/drive
  echo sudo mount -t ntfs-3g -o uid=pi,gid=pi /dev/sda1 /mnt/drive
}

xterm_customizations() {
  if [[ "$USER" == "knoppix" ]]; then 
    # Knoppix 8 has colors in vi turned on
    alias vi='vim'
    if ! grep -qF "syntax off" ~/.vimrc; then
      echo "syntax off" >> ~/.vimrc
    fi
    alias xterm="xterm -ls -xrm 'XTerm*selectToClipboard: true' &"
  elif (more /etc/os-release | grep "^ID=" | grep raspbian); then
    echo .
    # Put any Raspbian-specific options here
    # TO DO: US Keyboard config
  fi
  alias x='xterm'
  unalias ls 2>/dev/null
}

#
# Set up a Java/Maven environment on the local node
#
java_dev() {
  sudo apt-get update
  if (more /etc/os-release | grep "^ID=" | grep raspbian); then 
    # Raspbian
    sudo apt-get install -y oracle-java8-jdk 
  elif [[ "$USER" == "knoppix" ]]; then
    # Knoppix, note that you'll get OpenJDK here
    sudo apt-get install -y maven
  else
    echo -e '\n\n Could not install Java, unknown OS!'
  fi
}

# 
# Install the AWS CLI
#
install_aws_cli() {
  if [[ "x$USER" == "xknoppixx" ]]; then
    if [ `echo $awscli_version_label | grep aws-cli | wc -c` -gt 0 ]; then
      echo -e "\n\n AWS CLI is installed and is at version `echo $awscli_version_label | cut -f2 -d'\'`\n\n"
    else
      # For some reason Knoppix 8.1 is not able to run the pip install with --user, so using the AWSCLI bundle for now....
      echo -e "\n\n Downloading the AWS CLI bundle"
      mkdir /tmp/aws-cli-install && cd /tmp/aws-cli-install
      curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
      cd /tmp/aws-cli-install && unzip ./awscli-bundle.zip
      cd /tmp/aws-cli-install/awscli-bundle && ./install
      rm -rf /tmp/aws-cli-install
      if [ `echo $awscli_version_label | grep aws-cli | wc -c` -gt 0 ]; then
        echo -e "\n\n AWS CLI is installed and is at version `echo $awscli_version_label | cut -f2 -d'\'`\n\n"
      else
         echo -e "\n\n Error in installing AWS CLI \n\n"
         exit 1
      fi
    fi
  elif (more /etc/os-release | grep "^ID=" | grep raspbian); then
    awscli_version_label=`~/.local/bin/aws --version 2>&1`
    if [ `echo $awscli_version_label | grep aws-cli | wc -c` -gt 0 ]; then 
      echo -e "\n\n AWS CLI is installed and is at version `echo $awscli_version_label | cut -f2 -d'\'`\n\n"
    else
      echo -e "\n\n Installing the AWSCLI to ~/.local/bin \n\n"
      pip install awscli --user
      awscli_version_label=`~/.local/bin/aws --version 2>&1`
      if [ `echo $awscli_version_label | grep aws-cli | wc -c` -gt 0 ]; then 
         echo -e "\n\n AWS CLI is installed and is at version `echo $awscli_version_label | awk '{print $1}' | cut -f2 -d'\'`\n\n"
      else
         echo -e "\n\n Error in installing AWS CLI \n\n"
         exit 1
      fi
    fi
  else 
    # We could use the AWS bundle method for all other OSes, but I'd prefer to update the OS detector routine later
    echo -e "\n\n .bashrc: install_aws_cli():  Error in installing the AWS CLI (unknown OS) \n\n"
  fi
}

performance_tools() {
  mem='ps -ef -o vsz,args | sort -nr | head -5'
  pj='ps -ef | grep java'
}

cheat_sheet() {
  alias all_cheats='echo -e \\n\\n \
                    Symmetric encryption: echo gpg --output doc.txt.gpg --symmetric doc.txt \
                    .....'
  alias ac='all_cheats && bs '
  alias cs='all_cheats && bs'
  alias bs='echo -e "\\n\\n          ---- Bash shortcuts ---------\\n \
             ^   a  home   \\n \
             ^   e  end\\n \
             alt r  back one word   \
             \\n          -----------------------------"'
  alias vc='echo -e "\\n\\n          ---- Vi ---------\\n \
            Copy and paste: v to select, y to copy, P to paste (p for paste after) \\n \
            \\n          -----------------------------"'
  alias bc='bs'
}

misc_aliases() {
  alias aws='~/.local/bin/aws'
}

cheat_sheet
xterm_customizations
performance_tools
misc_aliases

# Note, no xterm customizations were needed here, however .bashrc isn't being launched when xterm is launched from the Knoppix LXTerminal
